name: "update-lambda-catalog"
on:
  schedule:
    - cron:  '00 */7 * * *'    # Every 7 hours (coprimes with 24)
    # The frequency can be tuned for the trade-off between
    # freshness of the price and github action cost/user downloading
    # overhead of the update.
    # _UPDATE_FREQUENCY_HOURS in `lambda_catalog.py` need to be updated
    # accordingly, if this is changed.
  workflow_dispatch:

jobs:
  update_lambda_catalog:
    runs-on: ubuntu-latest
    steps:
      - name: Clone SkyPilot repo
        uses: actions/checkout@v4
        with:
          repository: skypilot-org/skypilot
          path: sky
      - name: Clone Catalog repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: catalogs
          token: ${{ secrets.GH_ACTION_PAT }}
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cd sky
          uv pip install ".[lambda]"

      - name: Run fetch_lambda
        id: fetch_catalogs
        run: |
          versions=$(cat .metadata.yml | yq -r '.version_commit | keys[]')
          for version in $versions; do
            commit_hash=$(cat .metadata.yml | yq -r '.version_commit | .[] | select(. == $version)')
            cd sky
            git checkout $commit_hash
            uv pip install ".[lambda]"
            cd -
            mkdir -p catalogs/catalogs/$version
            cd catalogs/catalogs/$version
            python -m sky.clouds.service_catalog.data_fetchers.fetch_lambda_cloud --api-key ${LAMBDA_API_KEY}
          done
          echo "versions=$versions" >> $GITHUB_OUTPUT
        env:
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}

      - name: Commit catalog
        run: |
          cd catalogs
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m"[Bot] Update Lambda catalog $VERSIONS (scheduled at $(date))" || { echo "No changes to commit" && exit 0; }
          git fetch origin
          git rebase origin/master
          git push
        env:
          VERSIONS: ${{ steps.fetch_catalogs.outputs.versions }}
